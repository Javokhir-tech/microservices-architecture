spring.application.name: resource-processor-service
server.port: 8082

storage.application.name= storage-service
resource.application.name= resource-service

spring.rabbitmq.listener.simple.retry.enabled: true
spring.rabbitmq.listener.simple.retry.initial-interval: 3s
spring.rabbitmq.listener.simple.retry.max-attempts: 6
spring.rabbitmq.listener.simple.retry.max-interval: 10s
spring.rabbitmq.listener.simple.retry.multiplier: 2

spring.rabbitmq.host: localhost
spring.rabbitmq.port: 5672
spring.rabbitmq.username: guest
spring.rabbitmq.password: guest

eureka.client.serviceUrl.defaultZone: ${SERVICE_URL_DEFAULT_ZONE:http://localhost:8761/eureka}

#The Threshold Percentage Above Which the Circuit Breaker will move from Closed to Open State.
resilience4j.circuitbreaker.instances.cb-instanceA.failure-rate-threshold= 60

#Time in milliseconds, in which the circuit breaker is to stay in open state before moving to half-open state
resilience4j.circuitbreaker.instances.cb-instanceA.wait-duration-in-open-state: 5000

resilience4j.circuitbreaker.instances.cb-instanceA.permitted-number-of-calls-in-half-open-state: 10

#The number of calls after which the error rate is calculated. I have assigned it with a small value for test purpose.
resilience4j.circuitbreaker.instances.cb-instanceA.minimum-number-of-calls: 10
resilience4j.ratelimiter.instances.rl-instanceA.limit-refresh-period: 200ns

#The Max number of calls that can be done in the time specified by limit-refresh-period
resilience4j.ratelimiter.instances.rl-instanceA.limit-for-period: 40

# The max amount of time a call can last
resilience4j.ratelimiter.instances.rl-instanceA.timeout-duration: 3s

#The number of calls which can be queued if the thread pool is saturated
resilience4j.thread-pool-bulkhead.instances.tp-instanceA.queue-capacity: 2

#The Number of available threads in the Thread Pool.
resilience4j.thread-pool-bulkhead.instances.tp-instanceA.core-thread-pool-size: 4

# The max amount of time a call can last
resilience4j.timelimiter.instances.tl-instanceA.timeout-duration: 2s

#do not cancel the Running Completable Futures After TimeOut.
resilience4j.timelimiter.instances.tl-instanceA.cancel-running-future: false

resilience4j.retry.instances.re-instanceA.max-attempts: 3

# After this time, the call will be considered a failure and will be retried
resilience4j.retry.instances.re-instanceA.wait-duration: 1s

resilience4j.retry.instances.re-instanceA.retry-exceptions: java.lang.RuntimeException, java.io.IOException

management.endpoints.web.exposure.include: prometheus,health,info,metrics